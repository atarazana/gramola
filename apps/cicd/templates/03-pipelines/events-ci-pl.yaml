apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ .Values.gramolaEventsContinuosIntegrationPipeline }}
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  labels:
    app.kubernetes.io/instance: {{ .Values.gramolaEventsServiceName }}
    pipeline.openshift.io/runtime: quarkus
    pipeline.openshift.io/type: knative
spec:
  params:
    - name: APP_NAME
      type: string
      default: {{ .Values.gramolaEventsServiceName }}
    - name: GIT_PROVIDER
      type: string
    - name: GIT_REPO
      type: string
    - name: GIT_REPO_NAME
      type: string
    - name: GIT_REVISION
      type: string
      default: main
    - name: GIT_REPO_CONFIG
      type: string
    - name: GIT_REVISION_CONFIG
      type: string
      default: main
    - name: IMAGE_NAME
      type: string
    - name: IMAGE_TAG
      type: string
    - name: PATH_CONTEXT
      type: string
      default: .
    - name: QUARKUS_PROFILE
      type: string
      default: prod
    - name: DB_HOST
      type: string
      default: postgresql-db
    - name: REVISION_NAME
      type: string
    - name: GIT_SSL_VERIFY
      type: string
      default: '{{ .Values.gitSslVerify }}'
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: deleteExisting
          value: 'true'
        - name: sslVerify
          value: $(params.GIT_SSL_VERIFY)
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace-source
    - name: package
      params:
        - name: PATH_CONTEXT
          value: $(params.PATH_CONTEXT)
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        name: {{ printf "quarkus-package%s" .Values.namespaceSuffix }}
      workspaces:
        - name: source
          workspace: workspace-source
        - name: cache
          workspace: workspace-cache
    - name: build
      params:
        - name: IMAGE
          value: "$(params.IMAGE_NAME):$(params.IMAGE_TAG)"
        - name: TLSVERIFY
          value: 'false'
        - name: PATH_CONTEXT
          value: $(params.PATH_CONTEXT)
        - name: DOCKERFILE_PATH
          value: './src/main/docker/Dockerfile.jvm'
      runAfter:
        - package
      taskRef:
        kind: ClusterTask
        name: {{ printf "buildah-custom-build%s" .Values.namespaceSuffix }}
      workspaces:
        - name: source
          workspace: workspace-source
    - name: fetch-config-repository
      params:
        - name: url
          value: $(params.GIT_REPO_CONFIG)
        - name: revision
          value: $(params.GIT_REVISION_CONFIG)
        - name: deleteExisting
          value: 'true'
        - name: sslVerify
          value: $(params.GIT_SSL_VERIFY)
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace-source
    - name: update-image
      params:
        # - name: FILE_TO_UPDATE
        #   value: "{{ .Values.gramolaEventsOverlayPath }}/dev/kustomization.yml"
        - name: OVERLAYS_PATH
          value: "{{ .Values.gramolaEventsOverlayPath }}"
        - name: OVERLAY
          value: "dev"
        - name: SELECT_EXPRESSION
          value: "(.images.[] | select(.name == \"{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}*\")).newTag"
        - name: NEW_VALUE
          value: "$(tasks.build.results.IMAGE_DIGEST_CLEAN)"
        - name: SELECT_EXPRESSIONS
          value: 
            - "(.images.[] | select(.name == \"{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}*\")).newTag"
            - "(.images.[] | select(.name == \"{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}*\")).newName"
        - name: NEW_VALUES
          value: 
            - "$(tasks.build.results.IMAGE_DIGEST_CLEAN)"
            - "{{ .Values.containerRegistryServer }}/{{ .Values.containerRegistryOrg }}/{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}@sha256"
      runAfter:
        - fetch-config-repository
      taskRef:
        kind: ClusterTask
        name: {{ printf "yq-eval-in-place%s" .Values.namespaceSuffix }}
      workspaces:
        - name: source
          workspace: workspace-source
    - name: github-pr-create
      when:
        - input: "$(params.GIT_PROVIDER)"
          operator: in
          values: ['github']
      params:
        # PR Title describes the change and the overlay where it happens
        - name: PR_TITLE
          value: "Updating '{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}' image for overlay 'dev' with new image"
        # PR Body is a YAML with information for the next pipelines (stages)
        - name: PR_BODY
          value: |
            command: UPDATE_IMAGE
            serviceName: {{ .Values.gramolaEventsServiceName }}
            count: 0
            overlay: dev
            kustomizationPath: {{ .Values.gramolaEventsOverlayPath }}/dev/kustomization.yml
            imageDigestClean: $(tasks.build.results.IMAGE_DIGEST_CLEAN)
            pipelineName: {{ .Values.gramolaEventsContinuosIntegrationPipeline }}
        - name: PAT_SECRET_NAME
          value: {{ .Values.gitPatSecretName }}
        - name: PAT_SECRET_KEY
          value: {{ .Values.gitPatSecretKey }}
      runAfter:
        - update-image
      taskRef:
        kind: ClusterTask
        name: {{ printf "github-pr-create%s" .Values.namespaceSuffix }}
      workspaces:
        - name: source
          workspace: workspace-source
    - name: gitea-pr-create
      when:
        - input: "$(params.GIT_PROVIDER)"
          operator: in
          values: ['gitea']
      params:
        # PR Title describes the change and the overlay where it happens
        - name: PR_TITLE
          value: "Updating '{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}' image for overlay 'dev' with new image"
        # PR Body is a YAML with information for the next pipelines (stages)
        - name: PR_BODY
          value: |
            command: UPDATE_IMAGE\nserviceName: {{ .Values.gramolaEventsServiceName }}\ncount: 0\noverlay: dev\nkustomizationPath: {{ .Values.gramolaEventsOverlayPath }}/dev/kustomization.yml\nimageDigestClean: $(tasks.build.results.IMAGE_DIGEST_CLEAN)\npipelineName: {{ .Values.gramolaEventsContinuosIntegrationPipeline }}
        - name: PAT_SECRET_NAME
          value: {{ .Values.gitPatSecretName }}
        - name: PAT_SECRET_KEY
          value: {{ .Values.gitPatSecretKey }}
      runAfter:
        - update-image
      taskRef:
        kind: ClusterTask
        name: {{ printf "gitea-pr-create%s" .Values.namespaceSuffix }}
      workspaces:
        - name: source
          workspace: workspace-source
  workspaces:
    - name: workspace-source
    - name: workspace-cache
