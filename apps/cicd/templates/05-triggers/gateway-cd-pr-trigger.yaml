# This listener should be called by the configuration repo if a pull requests has been merged.
# For instance the `gateway` pipeline sends a change to the `dev` overlay to the 
# configuration repo somebody approves => merged (*)
# (*) https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-github-listener"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
spec:
  serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
  triggers:
    - name: github-listener
      interceptors:
        - ref:
            name: github
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # - name: secretRef
            #   value: 
            #     secretName: {{ .Values.gitPatSecretName }}
            #     secretKey: {{ .Values.gitPatSecretKey }}
            - name: eventTypes
              value:
                - pull_request
        # - github:
        #     # secretRef:
        #     #   secretName: github-secret
        #     #   secretKey: secretToken
        #     eventTypes:
        #       - pull_request
        - ref:
            name: cel
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # Triggers only if the PR was merged
            - name: filter
              value: "body.action in ['closed'] && body.pull_request.merged == true && body.pull_request.body.parseYAML().serviceName in ['{{ .Values.gramolaGatewayServiceName }}']"
            # PR Body is a YAML here we extract information to trigger the next step
            - name: overlays
              value:
                - key: image_digest_clean
                  expression: "body.pull_request.body.parseYAML().imageDigestClean"
                - key: count
                  expression: "int(body.pull_request.body.parseYAML().count) + 1"
                - key: overlay
                  expression: "body.pull_request.body.parseYAML().overlay"
                - key: next_overlay
                  expression: "(int(body.pull_request.body.parseYAML().count) + 1) < size('{{ .Values.overlays }}'.split(',')) ? '{{ .Values.overlays }}'.split(',')[int(body.pull_request.body.parseYAML().count) + 1] : ''"
        # - cel:
        #     # Triggers only if the PR was merged
        #     filter: "body.action in ['closed'] && body.pull_request.merged == true && body.pull_request.body.parseYAML().serviceName in ['{{ .Values.gramolaGatewayServiceName }}']"
        #     # PR Body is a YAML here we extract information to trigger the next step
        #     overlays:
        #       - key: image_digest_clean
        #         expression: "body.pull_request.body.parseYAML().imageDigestClean"
        #       - key: count
        #         expression: "int(body.pull_request.body.parseYAML().count) + 1"
        #       - key: overlay
        #         expression: "body.pull_request.body.parseYAML().overlay"
        #       - key: next_overlay
        #         expression: "(int(body.pull_request.body.parseYAML().count) + 1) < size('{{ .Values.overlays }}'.split(',')) ? '{{ .Values.overlays }}'.split(',')[int(body.pull_request.body.parseYAML().count) + 1] : ''"
      bindings:
        - kind: TriggerBinding
          ref: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-github-trigger-binding"
      template:
        ref: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-trigger-template"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-github-trigger-binding"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
    value: $(body.repository.clone_url)
  - name: gitRepository
    value: $(body.repository.full_name)
  - name: pullRequestBaseRef # merged to
    value: $(body.pull_request.base.ref)
  - name: pullRequestHeadRef # merged from
    value: $(body.pull_request.head.ref)
  - name: pullRequestTitle
    value: $(body.pull_request.title)
  - name: pullRequestBody
    value: $(body.pull_request.body)
  - name: imageDigestClean
    value: $(extensions.image_digest_clean)
  - name: count
    value: $(extensions.count)
  - name: overlay
    value: $(extensions.overlay)
  - name: nextOverlay
    value: $(extensions.next_overlay)
  - name: contentType
    value: $(header.Content-Type)
  - name: gitProvider
    value: github
---
# This listener should be called by the configuration repo if a pull requests has been merged.
# For instance the `gateway` pipeline sends a change to the `dev` overlay to the 
# configuration repo somebody approves => merged (*)
# (*) https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-gitea-listener"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
spec:
  serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
  triggers:
    - name: github-listener
      interceptors:
        - ref:
            name: github
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # - name: secretRef
            #   value: 
            #     secretName: {{ .Values.gitPatSecretName }}
            #     secretKey: {{ .Values.gitPatSecretKey }}
            - name: eventTypes
              value:
                - pull_request
        # - github:
        #     # secretRef:
        #     #   secretName: github-secret
        #     #   secretKey: secretToken
        #     eventTypes:
        #       - pull_request
        - ref:
            name: cel
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # Triggers only if the PR was merged
            - name: filter
              value: "body.action in ['closed'] && body.pull_request.merged == true && body.pull_request.body.parseYAML().serviceName in ['{{ .Values.gramolaGatewayServiceName }}']"
            # PR Body is a YAML here we extract information to trigger the next step
            - name: overlays
              value:
                - key: image_digest_clean
                  expression: "body.pull_request.body.parseYAML().imageDigestClean"
                - key: count
                  expression: "int(body.pull_request.body.parseYAML().count) + 1"
                - key: overlay
                  expression: "body.pull_request.body.parseYAML().overlay"
                - key: next_overlay
                  expression: "(int(body.pull_request.body.parseYAML().count) + 1) < size('{{ .Values.overlays }}'.split(',')) ? '{{ .Values.overlays }}'.split(',')[int(body.pull_request.body.parseYAML().count) + 1] : ''"
        # - cel:
        #     # Triggers only if the PR was merged
        #     filter: "body.action in ['closed'] && body.pull_request.merged == true && body.pull_request.body.parseYAML().serviceName in ['{{ .Values.gramolaGatewayServiceName }}']"
        #     # PR Body is a YAML here we extract information to trigger the next step
        #     overlays:
        #       - key: image_digest_clean
        #         expression: "body.pull_request.body.parseYAML().imageDigestClean"
        #       - key: count
        #         expression: "int(body.pull_request.body.parseYAML().count) + 1"
        #       - key: overlay
        #         expression: "body.pull_request.body.parseYAML().overlay"
        #       - key: next_overlay
        #         expression: "(int(body.pull_request.body.parseYAML().count) + 1) < size('{{ .Values.overlays }}'.split(',')) ? '{{ .Values.overlays }}'.split(',')[int(body.pull_request.body.parseYAML().count) + 1] : ''"
      bindings:
        - kind: TriggerBinding
          ref: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-gitea-trigger-binding"
      template:
        ref: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-trigger-template"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-gitea-trigger-binding"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
    value: $(body.repository.clone_url)
  - name: gitRepository
    value: $(body.repository.full_name)
  - name: pullRequestBaseRef # merged to
    value: $(body.pull_request.base.ref)
  - name: pullRequestHeadRef # merged from
    value: $(body.pull_request.head.ref)
  - name: pullRequestTitle
    value: $(body.pull_request.title)
  - name: pullRequestBody
    value: $(body.pull_request.body)
  - name: imageDigestClean
    value: $(extensions.image_digest_clean)
  - name: count
    value: $(extensions.count)
  - name: overlay
    value: $(extensions.overlay)
  - name: nextOverlay
    value: $(extensions.next_overlay)
  - name: contentType
    value: $(header.Content-Type)
  - name: gitProvider
    value: gitea
---
# This listener should be called by the configuration repo if a pull requests has been merged.
# For instance the `gateway` pipeline sends a change to the `dev` overlay to the 
# configuration repo somebody approves => merged (*)
# (*) https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-gitlab-listener"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
spec:
  serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
  triggers:
    - name: gitlab-listener
      interceptors:
        - ref:
            name: gitlab
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # - name: secretRef
            #   value: 
            #     secretName: {{ .Values.gitPatSecretName }}
            #     secretKey: {{ .Values.gitPatSecretKey }}
            - name: eventTypes
              value:
                - pull_request
        - ref:
            name: cel
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # Triggers only if the PR was merged
            - name: filter
              value: "body.action in ['closed'] && body.pull_request.merged == true && body.pull_request.body.parseYAML().serviceName in ['{{ .Values.gramolaGatewayServiceName }}']"
            # PR Body is a YAML here we extract information to trigger the next step
            - name: overlays
              value:
                - key: image_digest_clean
                  expression: "body.pull_request.body.parseYAML().imageDigestClean"
                - key: count
                  expression: "int(body.pull_request.body.parseYAML().count) + 1"
                - key: overlay
                  expression: "body.pull_request.body.parseYAML().overlay"
                - key: next_overlay
                  expression: "(int(body.pull_request.body.parseYAML().count) + 1) < size('{{ .Values.overlays }}'.split(',')) ? '{{ .Values.overlays }}'.split(',')[int(body.pull_request.body.parseYAML().count) + 1] : ''"
      bindings:
        - kind: TriggerBinding
          ref: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-trigger-binding"
      template:
        ref: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-trigger-template"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-gitlab-trigger-binding"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
    value: $(body.repository.clone_url)
  - name: gitRepository
    value: $(body.repository.full_name)
  - name: pullRequestBaseRef # merged to
    value: $(body.pull_request.base.ref)
  - name: pullRequestHeadRef # merged from
    value: $(body.pull_request.head.ref)
  - name: pullRequestTitle
    value: $(body.pull_request.title)
  - name: pullRequestBody
    value: $(body.pull_request.body)
  - name: imageDigestClean
    value: $(extensions.image_digest_clean)
  - name: count
    value: $(extensions.count)
  - name: overlay
    value: $(extensions.overlay)
  - name: nextOverlay
    value: $(extensions.next_overlay)
  - name: contentType
    value: $(header.Content-Type)
  - name: gitProvider
    value: gitlab
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-trigger-template"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
  - name: gitRevision
  - name: pullRequestBaseRef
  - name: pullRequestHeadRef
  - name: pullRequestTitle
  - name: pullRequestBody
  - name: imageDigestClean
  - name: count
  - name: overlay
  - name: nextOverlay
  - name: gitProvider
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: "{{ .Values.gramolaGatewayCdPrTriggerRootName }}-$(tt.params.overlay)-plr-"
      namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
      labels:
        app.kubernetes.io/instance: {{ .Values.gramolaGatewayServiceName }}
        pipeline.openshift.io/runtime: quarkus
        pipeline.openshift.io/type: knative
        tekton.dev/pipeline: {{ .Values.gramolaGatewayContinuosDeliveryPipeline }}
    spec:
      params:
        - name: APP_NAME
          value: "{{ .Values.gramolaGatewayServiceName }}"
        - name: GIT_PROVIDER
          value: $(tt.params.gitProvider)
        - name: GIT_REPO_CONFIG
          # value: "{{ .Values.gitUrl }}/{{ .Values.gitUsername }}/{{ .Values.baseRepoName }}"
          value: "{{ .Values.baseRepoUrl }}"
        - name: GIT_REVISION_CONFIG
          value: main
        - name: IMAGE_DIGEST_CLEAN
          value: $(tt.params.imageDigestClean)
        - name: COUNT
          value: $(tt.params.count)
        - name: OVERLAY
          value: $(tt.params.overlay)
        - name: NEXT_OVERLAY
          value: $(tt.params.nextOverlay)
      pipelineRef:
        name: {{ .Values.gramolaGatewayContinuosDeliveryPipeline }}
      serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
      timeout: 1h0m0s
      workspaces:
        - name: workspace-source
          persistentVolumeClaim:
            claimName: "{{ .Values.gramolaGatewayServiceName }}-source-pvc"
        - name: workspace-cache
          persistentVolumeClaim:
            claimName: "{{ .Values.gramolaGatewayServiceName }}-cache-pvc"
