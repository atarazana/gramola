apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-github-listener"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
spec:
  serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
  triggers:
    - name: github-listener
      interceptors:
        - ref:
            name: github
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # - name: secretRef
            #   value: 
            #     secretName: {{ .Values.gitPatSecretName }}
            #     secretKey: {{ .Values.gitPatSecretKey }}
            - name: eventTypes
              value:
                - push
        # - github:
        #     # secretRef:
        #     #   secretName: github-secret
        #     #   secretKey: secretToken
        #     eventTypes:
        #       - push
        # - cel:
        #     filter: "body.action in ['opened', 'synchronize', 'reopened']"
      bindings:
        - kind: TriggerBinding
          ref: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-github-trigger-binding"
      template:
        ref: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-trigger-template"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-github-trigger-binding"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
    value: $(body.repository.clone_url)
  - name: gitRepository
    value: $(body.repository.full_name)
  - name: gitRevision
    value: $(body.after)
  - name: contentType
    value: $(header.Content-Type)
  - name: gitId
    value: $(body.after)
  - name: gitProvider
    value: github
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-gitea-listener"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
spec:
  serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
  triggers:
    - name: github-listener
      interceptors:
        - ref:
            name: github
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # - name: secretRef
            #   value: 
            #     secretName: {{ .Values.gitPatSecretName }}
            #     secretKey: {{ .Values.gitPatSecretKey }}
            - name: eventTypes
              value:
                - push
        # - github:
        #     # secretRef:
        #     #   secretName: github-secret
        #     #   secretKey: secretToken
        #     eventTypes:
        #       - push
        # - cel:
        #     filter: "body.action in ['opened', 'synchronize', 'reopened']"
      bindings:
        - kind: TriggerBinding
          ref: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-gitea-trigger-binding"
      template:
        ref: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-trigger-template"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-gitea-trigger-binding"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
    value: $(body.repository.clone_url)
  - name: gitRepository
    value: $(body.repository.full_name)
  - name: gitRevision
    value: $(body.after)
  - name: contentType
    value: $(header.Content-Type)
  - name: gitId
    value: $(body.after)
  - name: gitProvider
    value: gitea
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-gitlab-listener"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
spec:
  serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
  triggers:
    - name: gitlab-listener
      interceptors:
        - ref:
            name: gitlab
            kind: ClusterInterceptor
            apiVersion: triggers.tekton.dev
          params:
            # - name: secretRef
            #   value: 
            #     secretName: {{ .Values.gitPatSecretName }}
            #     secretKey: {{ .Values.gitPatSecretKey }}
            - name: eventTypes
              value:
                - push
      bindings:
        - kind: TriggerBinding
          ref: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-gitlab-trigger-binding"
      template:
        ref: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-trigger-template"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-gitlab-trigger-binding"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
    value: $(body.repository.clone_url)
  - name: gitRepository
    value: $(body.repository.full_name)
  - name: gitRevision
    value: $(body.after)
  - name: contentType
    value: $(header.Content-Type)
  - name: gitId
    value: $(body.after)
  - name: gitProvider
    value: gitlab
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-trigger-template"
  namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  params:
  - name: gitRepositoryUrl
  - name: gitRepository
  - name: gitRevision
  - name: gitId
  - name: gitProvider
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: "{{ .Values.gramolaEventsCiPushTriggerRootName }}-plr-"
      namespace: {{ printf "%s%s" .Values.cicdNamespace .Values.namespaceSuffix }}
      labels:
        app.kubernetes.io/instance: {{ .Values.gramolaEventsServiceName }}
        pipeline.openshift.io/runtime: quarkus
        pipeline.openshift.io/type: knative
        tekton.dev/pipeline: {{ .Values.gramolaEventsContinuosIntegrationPipeline }}
    spec:
      params:
        - name: APP_NAME
          value: "{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}"
        - name: GIT_PROVIDER
          value: $(tt.params.gitProvider)
        - name: GIT_REPO
          value: $(tt.params.gitRepositoryUrl)
        - name: GIT_REPO_NAME
          value: $(tt.params.gitRepository)
        - name: GIT_REVISION
          value: $(tt.params.gitRevision)
        - name: GIT_REPO_CONFIG
          # value: "{{ .Values.gitUrl }}/{{ .Values.gitUsername }}/{{ .Values.baseRepoName }}"
          value: "{{ .Values.baseRepoUrl }}"
        - name: GIT_REVISION_CONFIG
          value: main
        - name: IMAGE_NAME
          value: >-
            {{ .Values.containerRegistryServer }}/{{ .Values.containerRegistryOrg }}/{{ .Values.appName }}-{{ .Values.gramolaEventsServiceName }}
        - name: IMAGE_TAG
          value: $(tt.params.gitRevision)
        - name: PATH_CONTEXT
          value: .
        - name: QUARKUS_PROFILE
          value: prod
        - name: DB_HOST
          value: "{{ .Values.gramolaEventsServiceName }}-database"
        - name: REVISION_NAME
          value: v1
      pipelineRef:
        name: {{ .Values.gramolaEventsContinuosIntegrationPipeline }}
      serviceAccountName: {{ .Values.pipelinesServiceAccountName }}
      timeout: 1h0m0s
      workspaces:
        - name: workspace-source
          persistentVolumeClaim:
            claimName: "{{ .Values.gramolaEventsServiceName }}-source-pvc"
        - name: workspace-cache
          persistentVolumeClaim:
            claimName: "{{ .Values.gramolaEventsServiceName }}-cache-pvc"

