apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    tekton.dev/displayName: GitHub create pull request cluster task
    tekton.dev/pipelines.minVersion: '0.19'
    tekton.dev/tags: 'argocd, gitops'
  name: {{ printf "argocd-sync%s" .Values.namespaceSuffix }}
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    These Task triggers a sync operation.
  params:
    - description: Name of the Application to sync
      name: APP_NAME
      type: string
    - description: Name of the Twin Application to sync
      name: TWIN_APP_NAME
      type: string
    - default: quay.io/atarazana/argocd:0.0.1
      description: The image used where the argocd binary is
      name: TASK_IMAGE
      type: string
  results:
    - description: Success or failure while syncing APP_NAME
      name: APP_SYNC_SUCCESS
    - description: Success or failure while syncing TWIN_APP_NAME
      name: TWIN_APP_SYNC_SUCCESS
  steps:
    - image: $(params.TASK_IMAGE)
      name: eval
      resources: {}
      script: |
        #!/bin/sh

        printf "\n>>> START\n\n"

        printf "APP_NAME=$(params.APP_NAME)\n"
        printf "TWIN_APP_NAME=$(params.TWIN_APP_NAME)\n\n"

        printf "Gathering credentials for logging in ArgoCD instance in-cluster\n"
        printf "===============================================================\n\n"
        ARGOCD_USERNAME=admin
        ARGOCD_SERVER=$(oc get route/openshift-gitops-server -o jsonpath='{.status.ingress[0].host}' -n openshift-gitops)
        ARGOCD_PASSWORD=$(oc get secret openshift-gitops-cluster -o jsonpath='{.data.admin\.password}' -n openshift-gitops | base64 -d)

        printf "\nARGOCD_USERNAME=${ARGOCD_USERNAME}"
        printf "\nARGOCD_SERVER=${ARGOCD_SERVER}\n\n"

        printf "Attempting logging in ArgoCD instance in-cluster\n"
        printf "================================================\n\n"
        argocd login $ARGOCD_SERVER --insecure --grpc-web --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD

        printf "Starting sync of $(params.APP_NAME)\n"
        printf "================================================\n\n"
        argocd app sync --grpc-web --timeout 120 $(params.APP_NAME)
        printf "\nSync of $(params.APP_NAME) ended\n"
        printf "================================================\n\n"
        if [ "$?" == 0 ]; then
          printf "Checking if twin app $(params.TWIN_APP_NAME) exists\n"
          printf "================================================================\n\n"
          argocd app get --grpc-web $(params.TWIN_APP_NAME)
          if [ "$?" == 0 ]; then
            printf "Starting sync of $(params.TWIN_APP_NAME)\n"
            printf "==============================================================\n\n"
            argocd app sync --grpc-web --timeout 120 $(params.TWIN_APP_NAME)
            if ! [ "$?" == 0 ]; then
              printf "\n*** ERROR WHILE SYNCING TWIN APP $(params.TWIN_APP_NAME) ***\n"
              echo -n "false" > $(results.TWIN_APP_SYNC_SUCCESS.path)
              exit 1
            else
              echo -n "true" > $(results.TWIN_APP_SYNC_SUCCESS.path)
            fi
          else
            printf "\n*** APP $(params.TWIN_APP_NAME) NOT FOUND ***\n"
          fi
        else
          printf "\n*** ERROR WHILE SYNCING $(params.APP_NAME) ***"
          echo -n "false" > $(results.APP_SYNC_SUCCESS.path)
          exit 1
        fi
        
        echo -n "true" > $(results.APP_SYNC_SUCCESS.path)
        printf "\n<<< END\n\n"
