apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    tekton.dev/displayName: buildah custom build
    tekton.dev/pipelines.minVersion: '0.19'
    tekton.dev/tags: 'buildah, workspace'
  name: {{ printf "quarkus-package%s" .Values.namespaceSuffix }}

  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: redhat
spec:
  description: >-
    This task package a quarkus application.
  params:
    - default: .
      description: The location of the path to build from
      name: PATH_CONTEXT
      type: string
    - default: quay.io/atarazana/quarkus-native-build-base:20.3.1.2-Final
      description: The location of the quarkus builder image.
      name: BUILDER_IMAGE
      type: string
    - default: "false"
      description: Native build flag, false by default
      name: NATIVE_BUILD
      type: string
    # - default: "false"
    #   description: Proxy Enabled
    #   name: PROXY_ENABLED
    #   type: string
    # - description: Proxy HTTP
    #   name: HTTP_PROXY
    #   type: string
    # - description: Proxy HTTPS
    #   name: HTTPS_PROXY
    #   type: string
    # - description: No Proxy
    #   name: NO_PROXY
    #   type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
  steps:
    - args:
        - |-
          export PATTERN='http[s]*://([^\:]*):([^\:]*)'

          if [ -z "${HTTP_PROXY}" ]
          then
            echo "\$HTTP_PROXY is empty"
          else
            [[ ${HTTP_PROXY} =~ ${PATTERN} ]]
            PROXY_HOST_HTTP=${BASH_REMATCH[1]}
            PROXY_PORT_HTTP=${BASH_REMATCH[2]}
            echo "PROXY_HOST_HTTP=${PROXY_HOST_HTTP} PROXY_PORT_HTTP=${PROXY_PORT_HTTP}"
            
            PROXY_CONF="-Dhttp.proxyHost=${PROXY_HOST_HTTP} -Dhttp.proxyPort=${PROXY_PORT_HTTP}"
            echo "PROXY_CONF=${PROXY_CONF}"
          fi

          if [ -z "${HTTPS_PROXY}" ]
          then
            echo "\$HTTPS_PROXY is empty"
          else
            [[ ${HTTPS_PROXY} =~ ${PATTERN} ]]
            PROXY_HOST_HTTPS=${BASH_REMATCH[1]}
            PROXY_PORT_HTTPS=${BASH_REMATCH[2]}
            echo "PROXY_HOST_HTTPS=${PROXY_HOST_HTTPS} PROXY_PORT_HTTPS=${PROXY_PORT_HTTPS}"
            
            PROXY_CONF="${PROXY_CONF} -Dhttps.proxyHost=${PROXY_HOST_HTTPS} -Dhttps.proxyPort=${PROXY_PORT_HTTPS}"
            echo "PROXY_CONF=${PROXY_CONF}"
          fi

          if [ -z "${NO_PROXY}" ]
          then
            echo "\$NO_PROXY is empty"
          else
            
            PROXY_NO=${NO_PROXY//,/|}
            echo "PROXY_NO=${PROXY_NO}"
            
            PROXY_CONF="${PROXY_CONF} -Dhttp.nonProxyHosts=${PROXY_NO}"
            echo "PROXY_CONF=${PROXY_CONF}"
          fi
          
          echo "------------------------------"
          echo "PATH_CONTEXT: $(params.PATH_CONTEXT)"
          cd $(params.PATH_CONTEXT)
          echo "$(pwd)"
          ls -ltrh $(workspaces.cache.path)
          mkdir -p $(workspaces.cache.path)/.m2
          cp ./oci/settings.xml $(workspaces.cache.path)/.m2/
          ls -ltrh $(workspaces.cache.path)/.m2
          alias mvn="mvn --global-settings $(workspaces.cache.path)/.m2/settings.xml -Dmaven.repo.local=$(workspaces.cache.path)"
          mvn dependency:go-offline ${PROXY_CONF}
          if [ "$(params.NATIVE_BUILD)" = true ] ; then
            mvn clean package -Pnative -DskipTests ${PROXY_CONF}
          else
            mvn clean package -DskipTests ${PROXY_CONF}
          fi
          
          echo "------------------------------"
      command:
        - /bin/sh
        - '-c'
      image: $(params.BUILDER_IMAGE)
      name: package
      resources: {}
      # volumeMounts:
      #   - mountPath: /var/lib/containers
      #     name: varlibcontainers
      workingDir: $(workspaces.source.path)/$(params.PATH_CONTEXT)
    
  # volumes:
  #   - emptyDir: {}
  #     name: varlibcontainers
  #   - emptyDir: {}
  #     name: envparams
  workspaces:
    - mountPath: /workspace/source
      name: source
    - mountPath: /workspace/cache
      name: cache