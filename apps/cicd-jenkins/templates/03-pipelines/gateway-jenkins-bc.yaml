apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    name: '{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}-pipeline'
    app: '{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}-{{ .Values.jenkinsServiceName }}-app'
  name: '{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}-pipeline'
  namespace: '{{ .Values.jenkinsNamespace }}'
spec:
  source:
    type: Git
    git:
      uri: '{{ .Values.gitUrl }}'
      ref: '{{ .Values.gitRevision }}'
    sourceSecret:
      name: '{{ .Values.gitPatSecretName }}'
    secrets:
    - secret:
        name: '{{ .Values.gitPatSecretName }}'
      destinationDir: "{{ .Values.gitPatSecretName }}"
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      # jenkinsfilePath: '{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}-pipeline.groovy'
      jenkinsfile: |-
        node('{{ .Values.jenkinsAgentName }}') {
        try {
            timeout(time: 20, unit: 'MINUTES') {
                
                def mvnCmd = "mvn"
                def POM_VERSION = "0.0.0"

                def DIR_CODE = "code"
                def DIR_CONF = "conf"

                def NEW_IMAGE_TAG = ""
                def NEW_IMAGE_NAME = "{{ .Values.containerRegistryServer }}/{{ .Values.containerRegistryOrg }}/{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}@sha256"
                def BRANCH_NAME = ""
                def SRC_REGISTRY_HOST = ""
                def DEST_REGISTRY_SECRET_NAME = "{{.Values.containerRegistrySecretName }}-raw"
                def DEST_REGISTRY_HOST = "{{ .Values.containerRegistryServer }}"
                def DEST_REGISTRY_ORG = "{{ .Values.containerRegistryOrg }}"
                def DEST_REGISTRY_USER = ""
                def DEST_REGISTRY_PASS = ""
                def DEST_REGISTRY_CREDS = ""
                
                def CONTAINER_TLS_VERIFY = {{ .Values.containerRegistryTlsVerify }}

                pipeline {
                    stage('Checkout Code') {
                        checkout([  
                            $class: 'GitSCM', 
                            branches: [[name: "refs/heads/${GIT_REF}"]], 
                            doGenerateSubmoduleConfigurations: false, 
                            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${DIR_CODE}"]], 
                            submoduleCfg: [], 
                            userRemoteConfigs: [[
                              credentialsId: '{{ .Values.jenkinsNamespace }}-{{ .Values.gitPatSecretName }}', 
                              url: "${GIT_URL}"]]
                        ])
                        
                        dir("${DIR_CODE}") {
                          sh 'git branch'
                        }
                    }

                    //stage('Compile') {
                    //    dir("${DIR_CODE}/${GIT_CONTEXT_DIR}") {
                    //      def pom = readMavenPom file: 'pom.xml'
                    //      POM_VERSION = pom.version
                    //      print "POM_VERSION = ${POM_VERSION}"
                    //      sh "${mvnCmd} clean package -DskipTests"
                    //    }
                    //}

                    //stage('Test') {
                    //    dir("${DIR_CODE}/${GIT_CONTEXT_DIR}") {
                    //      sh "${mvnCmd} test"
                    //    }
                    //} 

                    stage('Build Image') {
                        openshift.withCluster("${CLUSTER_NAME}") {
                            openshift.withCredentials("${CLUSTER_CREDENTIALS}") {
                                openshift.withProject("${BUILD_PROJECT_NAME}") {
                                    openshift.selector("bc", "${BUILD_CONFIG_NAME}").startBuild("", "--wait")
                                }
                            }
                        }
                    }

                    stage('Copy Image') {
                        openshift.withCluster("${CLUSTER_NAME}") {
                            openshift.withCredentials("${CLUSTER_CREDENTIALS}") {
                                openshift.withProject("${BUILD_PROJECT_NAME}") {
                                    def DEST_REGISTRY_SECRET = openshift.selector("secrets", "${DEST_REGISTRY_SECRET_NAME}").object()
                                    print "DEST_REGISTRY_SECRET: ${DEST_REGISTRY_SECRET}"
                                    DEST_REGISTRY_USER = new String(DEST_REGISTRY_SECRET.data.username.decodeBase64())
                                    DEST_REGISTRY_PASS = new String(DEST_REGISTRY_SECRET.data.password.decodeBase64())
                                }
                                openshift.withProject("openshift-image-registry") {
                                    SRC_REGISTRY_HOST = openshift.selector("routes", "default-route").object().spec.host
                                    print "SRC_REGISTRY_HOST: ${SRC_REGISTRY_HOST}"
                                    def TOKEN_SA = openshift.raw( 'whoami', '-t' ).out.replace("\n", "")
                                    print "TOKEN_SA: ${TOKEN_SA}"

                                    def SRC_REGISTRY_URL = "docker://${SRC_REGISTRY_HOST}/${BUILD_PROJECT_NAME}/{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}:latest"
                                    def DEST_REGISTRY_URL = "docker://${DEST_REGISTRY_HOST}/${DEST_REGISTRY_ORG}/{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}:latest"
                                    sh "skopeo login --tls-verify=${CONTAINER_TLS_VERIFY} -u serviceaccount -p ${TOKEN_SA} ${SRC_REGISTRY_HOST}"
                                    sh "skopeo login --tls-verify=${CONTAINER_TLS_VERIFY} -u ${DEST_REGISTRY_USER} -p ${DEST_REGISTRY_PASS} ${DEST_REGISTRY_HOST}"
                                    sh "skopeo copy --src-tls-verify=${CONTAINER_TLS_VERIFY} --dest-tls-verify=${CONTAINER_TLS_VERIFY} ${SRC_REGISTRY_URL} ${DEST_REGISTRY_URL}"
                                }
                            }
                        }
                    }

                    stage('Fetch Image Digest') {
                        openshift.withCluster("${CLUSTER_NAME}") {
                            openshift.withCredentials("${CLUSTER_CREDENTIALS}") {
                                openshift.withProject("${BUILD_PROJECT_NAME}") {
                                    def IMAGE_DIGEST = openshift.selector("imagetags", "${IMAGE_TAG_NAME}").object().image.metadata.name
                                    print "IMAGE_DIGEST: ${IMAGE_DIGEST}"
                                    NEW_IMAGE_TAG = ("${IMAGE_DIGEST}" =~ /.*\:(.*)/)[0][1]
                                    print "NEW_IMAGE_TAG: ${NEW_IMAGE_TAG}"
                                }
                            }
                        }
                    }

                    stage('Checkout Configuration') {
                      def charPool = ('a'..'z') + ('A'..'Z') + (0..9)
                      Collections.shuffle charPool
                      DEV_BRANCH_NAME = "dev-fb-" + charPool.take(5).join('')
                      checkout([  
                          $class: 'GitSCM', 
                          branches: [[name: "refs/heads/${GIT_CONF_REF}"]], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: "${DIR_CONF}"]
                            ,[$class: 'LocalBranch', localBranch: "${DEV_BRANCH_NAME}"]
                          ], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[
                            credentialsId: '{{ .Values.jenkinsNamespace }}-{{ .Values.gitPatSecretName }}', 
                            url: "${GIT_CONF_URL}"]]
                      ])
                      dir("${DIR_CONF}") {
                        sh 'pwd'
                        sh 'git branch'
                        withCredentials([
                            usernamePassword(credentialsId: '{{ .Values.jenkinsNamespace }}-{{ .Values.gitPatSecretName }}', 
                            passwordVariable: 'GIT_PASSWORD', 
                            usernameVariable: 'GIT_USERNAME')]) {
                            print "GIT_USERNAME: ${GIT_USERNAME}"
                            print "GIT_PASSWORD: ${GIT_PASSWORD}"
                            sh 'git config -l'
                            sh 'git config credential.helper "!p() { echo username=\\${GIT_USERNAME}; echo password=\\${GIT_PASSWORD}; }; p"'
                            sh 'git config user.email ${GIT_USERNAME}@examples.com'
                            sh 'git config user.name  ${GIT_USERNAME}'
                            sh 'git config -l'
                        }
                      }
                    }
                    
                    stage('Update Digest dev') {
                        withCredentials([
                          usernamePassword(credentialsId: '{{ .Values.jenkinsNamespace }}-{{ .Values.gitPatSecretName }}', 
                          passwordVariable: 'GIT_PASSWORD', 
                          usernameVariable: 'GIT_USERNAME')
                          ]) {
                            dir("${DIR_CONF}/${GIT_CONF_CONTEXT_DIR}") {
                                // Update overlays for dev env
                                sh "update-overlays.sh ${OVERLAYS_PATH} dev '{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}:0.0.0' ${NEW_IMAGE_NAME} ${NEW_IMAGE_TAG}"
                                // Commit changes
                                def commitMessage = "Update digest in overlay dev from branch ${DEV_BRANCH_NAME}"
                                sh "git commit -a -m \'${commitMessage}\'"
                            }
                        }
                    }

                    stage('Approve Deploy dev') {
                        timeout(time:15, unit:'MINUTES') {
                            input message:'Approve Deploy to DEV?'
                        }
                    }

                    stage("Push dev") {
                        withCredentials([
                          usernamePassword(credentialsId: '{{ .Values.jenkinsNamespace }}-{{ .Values.gitPatSecretName }}', 
                          passwordVariable: 'GIT_PASSWORD', 
                          usernameVariable: 'GIT_USERNAME')
                          ]) {
                          dir("${DIR_CONF}/${GIT_CONF_CONTEXT_DIR}") {
                              sh "git checkout ${GIT_CONF_REF}"
                              sh "git merge ${DEV_BRANCH_NAME}"
                              sh "git push origin ${GIT_CONF_REF}"
                          }
                        }
                    }

                    stage('Update Digest test') {
                        def charPool = ('a'..'z') + ('A'..'Z') + (0..9)
                        Collections.shuffle charPool
                        TEST_BRANCH_NAME = "test-fb-" + charPool.take(5).join('')
                        withCredentials([
                          usernamePassword(credentialsId: '{{ .Values.jenkinsNamespace }}-{{ .Values.gitPatSecretName }}', 
                          passwordVariable: 'GIT_PASSWORD', 
                          usernameVariable: 'GIT_USERNAME')
                          ]) {
                            dir("${DIR_CONF}/${GIT_CONF_CONTEXT_DIR}") {
                                sh "git checkout -b ${TEST_BRANCH_NAME}"
                                // Update overlays for test env
                                sh "update-overlays.sh ${OVERLAYS_PATH} test '{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}:0.0.0' ${NEW_IMAGE_NAME} ${NEW_IMAGE_TAG}"
                                // Commit changes
                                def commitMessage = "Update digest in overlay test from branch ${TEST_BRANCH_NAME}"
                                sh "git commit -a -m \'${commitMessage}\'"
                            }
                        }
                    }

                    stage('Approve Deploy test') {
                        timeout(time:15, unit:'MINUTES') {
                            input message:'Approve Deploy to TEST?'
                        }
                    }

                    stage("Push test") {
                        withCredentials([
                          usernamePassword(credentialsId: '{{ .Values.jenkinsNamespace }}-{{ .Values.gitPatSecretName }}', 
                          passwordVariable: 'GIT_PASSWORD', 
                          usernameVariable: 'GIT_USERNAME')
                          ]) {
                            dir("${DIR_CONF}/${GIT_CONF_CONTEXT_DIR}") {
                                sh "git checkout ${GIT_CONF_REF}"
                                sh "git merge ${TEST_BRANCH_NAME}"
                                sh "git push origin ${GIT_CONF_REF}"
                            }
                        }
                    }
                }
            }
        } catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
        }
        }        
      env:
        - name: XDG_RUNTIME_DIR
          value: "/tmp/"
        - name: CLUSTER_NAME
          {{ if .Values.pipelineClusterName }}
          value: '{{ .Values.pipelineClusterName }}'
          {{ end }}
        - name: CLUSTER_CREDENTIALS
          {{ if .Values.pipelineCredentials }}
          value: '{{ .Values.pipelineCredentials }}'
          {{ end }}
        - name: BUILD_CONFIG_NAME
          value: '{{ .Values.gramolaGatewayBuildConfigName }}'
        - name: BUILD_PROJECT_NAME
          value: '{{ .Values.jenkinsNamespace }}'
        - name: IMAGE_TAG_NAME
          value: '{{ .Values.gramolaGatewayPipelineImageTagName }}'
        - name: GIT_URL
          value: '{{ .Values.gitUrl }}/{{ .Values.gitUsername }}/{{ .Values.appName }}-{{ .Values.gramolaGatewayServiceName }}'
        - name: GIT_REF
          value: '{{ .Values.gitRevision }}'
        - name: GIT_CONTEXT_DIR
          value: '{{ .Values.gitContextDir }}'
        - name: GIT_CONF_URL
          value: '{{ .Values.gitUrl }}/{{ .Values.gitUsername }}/{{ .Values.baseRepoName }}'
        - name: GIT_CONF_REF
          value: '{{ .Values.gitRevision }}'
        - name: GIT_CONF_CONTEXT_DIR
          value: '{{ .Values.gitContextDir }}'
        - name: OVERLAYS_PATH
          value: '{{ .Values.gramolaGatewayOverlayPath }}'
        - name: MAVEN_OPTS
          value: >-
            -Dsun.zip.disableMemoryMapping=true -Xms20m
            -Djava.security.egd=file:/dev/./urandom
            -XX:+UnlockExperimentalVMOptions
            -Dsun.zip.disableMemoryMapping=true'            
        {{ if .Values.proxyEnabled }}
        - name: HTTP_PROXY
          value: '{{ .Values.proxyHttpUrl }}'
        - name: HTTPS_PROXY
          value: '{{ .Values.proxyHttpsUrl }}'
        - name: NO_PROXY
          value: '{{ .Values.proxyExceptions }}'
        {{ end }}