apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
  annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource
spec:
  applicationSet:
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  controller:
    processors: {}
    resources:
      limits:
        cpu: '2'
        memory: 8Gi
      requests:
        cpu: 250m
        memory: 4Gi
  resourceCustomizations: |
    bitnami.com/SealedSecret:
      health.lua: |
        hs = {}
        hs.status = "Healthy"
        hs.message = "Controller doesnt report resource status"
        return hs
    route.openshift.io/Route:
      ignoreDifferences: |
        jsonPointers:
        - /spec/host
  server:
    insecure: true
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
  dex:
    openShiftOAuth: true
  rbac:
    defaultPolicy: 'role:admin'
    policy: 'g, system:cluster-admins, role:admin'
    scopes: '[groups]'
  repo:
    env:
      - name: APP_ENV
        value: prod
    sidecarContainers:
      - name: kustomized-helm
        command: [/var/run/argocd/argocd-cmp-server]
        image: quay.io/atarazana/argocd-tools:0.0.2
        imagePullPolicy: Always
        securityContext:
          runAsNonRoot: true
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: plugin.yaml
            name: kustomized-helm
    volumes:
      - configMap:
          name: kustomized-helm
        name: kustomized-helm
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kustomized-helm
  namespace: openshift-gitops
data:
  plugin.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: ConfigManagementPlugin
    metadata:
      name: kustomized-helm
    spec:
      version: v1.0
      init:
        command: [sh, -c, 'helm dependency build ../../helm_base || true']
      generate:
        command: [sh, -c, 'helm template ../../helm_base --name-template $ARGOCD_APP_NAME --set debug=${ARGOCD_ENV_DEBUG},baseNamespace=${ARGOCD_ENV_BASE_NAMESPACE},clusterName=${ARGOCD_ENV_DESTINATION_NAME},gitUrl=${ARGOCD_ENV_GIT_URL},gitUsername=${ARGOCD_ENV_GIT_USERNAME},baseRepoName=${ARGOCD_ENV_BASE_REPO_NAME},gitRevision=${ARGOCD_ENV_GIT_REVISION}  --include-crds > ../../helm_base/all.yml && kustomize build']
      discover:
        find:
          command: [sh, -c, 'find . -maxdepth 1 -name run.sh']